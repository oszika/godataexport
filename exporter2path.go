package main

import (
	"os"
	"time"
)

type Exporter2Path struct {
	packageName string
	files       []string
}

func NewExporter2Path(packageName string) *Exporter2Path {
	return &Exporter2Path{packageName, make([]string, 0)}
}

func (e *Exporter2Path) AddFile(file *os.File) error {
	// Nothing to do
	return nil
}

func (e *Exporter2Path) GetTemplate() string {
	return `// GENERATED BY dataexport; DO NOT EDIT
// {{ .Time }}

package {{ .Package }}

import(
	"bytes"
	"os"
	"io"
)

func Get(path string) ([]byte, bool) {
	var buf bytes.Buffer

	file, err := os.Open(path)
	if err != nil {
		return nil, false
	}
	defer file.Close()

	if _, err := io.Copy(&buf, file); err != nil {
		return nil, false
	}

	return buf.Bytes(), true
}

func MustGet(path string) []byte {
	data, bool := Get(path)
	if !bool {
		panic("Can't get " + path)
	}
	return data
}
`
}

func (e *Exporter2Path) GetData() interface{} {
	return struct {
		Package string
		Time    time.Time
		Files   []string
	}{
		e.packageName,
		time.Now(),
		e.files,
	}
}

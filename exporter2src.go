package main

import (
	"bytes"
	"io"
	"os"
	"time"
)

type Exporter2Src struct {
	packageName string
	files       map[string][]byte
}

func NewExporter2Src(packageName string) *Exporter2Src {
	return &Exporter2Src{packageName, make(map[string][]byte)}
}

func (e *Exporter2Src) AddFile(file *os.File) error {
	var buf bytes.Buffer

	if _, err := io.Copy(&buf, file); err != nil {
		return err
	}

	e.files[file.Name()] = buf.Bytes()

	return nil
}

func (e *Exporter2Src) GetTemplate() string {
	return `// GENERATED BY dataexport; DO NOT EDIT
// {{ .Time }}

package {{ .Package }}

var data = map[string][]byte{
{{ range $key, $data := .Files }}
	{{ printf "%q" $key }}: []byte{ {{ range $i, $d := $data }} {{ $d }}, {{ end }} },
{{ end }}
}

func Get(path string) ([]byte, bool) {
	value, ok := data[path]
	return value, ok
}

func MustGet(path string) []byte {
	data, bool := Get(path)
	if !bool {
		panic("Can't get " + path)
	}
	return data
}
`
}

func (e *Exporter2Src) GetData() interface{} {
	return struct {
		Package string
		Time    time.Time
		Files   map[string][]byte
	}{
		e.packageName,
		time.Now(),
		e.files,
	}
}
